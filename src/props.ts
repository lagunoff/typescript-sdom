export type Prop<Model, T> = T|((m: Model) => T);
export type EventProp<Model, Msg, Ev extends Event, Elem> = (e: WithTarget<Ev, Elem>, m: Model) => Msg|void;
export type WithTarget<Ev extends Event, Target> = Omit<Ev, 'currentTarget'> & { currentTarget: Target };

export type Props<Model, Msg, Elem = HTMLElement> = {
  className?: Prop<Model, string>;
  class?: Prop<Model, string>;
  style?: Prop<Model, string>;
  classList?: Record<string, boolean|((m: Model) => boolean)>
  title?: Prop<Model, string>;
  selected?: Prop<Model, boolean>;
  hidden?: Prop<Model, boolean>;
  value?: Prop<Model, string>;
  defaultValue?: Prop<Model, string>;
  accept?: Prop<Model, string>;
  acceptCharset?: Prop<Model, string>;
  action?: Prop<Model, string>;
  autocomplete?: Prop<Model, 'on'|'off'>;
  autosave?: Prop<Model, string>;
  disabled?: Prop<Model, boolean>;
  enctype?: Prop<Model, string>;
  formation?: Prop<Model, string>;
  list?: Prop<Model, string>;
  maxlength?: Prop<Model, string>;
  minlength?: Prop<Model, string>;
  method?: Prop<Model, string>;
  multiple?: Prop<Model, boolean>;
  novalidate?: Prop<Model, boolean>;
  pattern?: Prop<Model, string>;
  readonly?: Prop<Model, boolean>;
  required?: Prop<Model, boolean>;
  size?: Prop<Model, string>;
  for?: Prop<Model, string>;
  form?: Prop<Model, string>;
  max?: Prop<Model, string>;
  min?: Prop<Model, string>;
  step?: Prop<Model, string>;
  cols?: Prop<Model, string>;
  rows?: Prop<Model, string>;
  wrap?: Prop<Model, string>;
  target?: Prop<Model, string>;
  download?: Prop<Model, string>;
  poster?: Prop<Model, string>;
  downloadAs?: Prop<Model, string>;
  hreflang?: Prop<Model, string>;
  media?: Prop<Model, string>;
  ping?: Prop<Model, string>;
  rel?: Prop<Model, string>;
  ismap?: Prop<Model, string>;
  usemap?: Prop<Model, string>;
  shape?: Prop<Model, string>;
  coords?: Prop<Model, string>;
  src?: Prop<Model, string>;
  height?: Prop<Model, string>;
  width?: Prop<Model, string>;
  alt?: Prop<Model, string>;
  autoplay?: Prop<Model, string>;
  controls?: Prop<Model, boolean>;
  loop?: Prop<Model, boolean>;
  preload?: Prop<Model, string>;
  default?: Prop<Model, boolean>;
  kind?: Prop<Model, string>;
  srclang?: Prop<Model, string>;
  sandbox?: Prop<Model, string>;
  seamless?: Prop<Model, string>;
  srcdoc?: Prop<Model, string>;
  reversed?: Prop<Model, string>;
  start?: Prop<Model, string>;
  align?: Prop<Model, string>;
  colspan?: Prop<Model, string>;
  rowspan?: Prop<Model, string>;
  headers?: Prop<Model, string>;
  scope?: Prop<Model, string>;
  async?: Prop<Model, boolean>;
  charset?: Prop<Model, string>;
  content?: Prop<Model, string>;
  defer?: Prop<Model, string>;
  httpEquiv?: Prop<Model, string>;
  language?: Prop<Model, string>;
  scoped?: Prop<Model, string>;
  type?: Prop<Model, string>;
  name?: Prop<Model, string>;
  href?: Prop<Model, string>;
  id?: Prop<Model, string>;
  placeholder?: Prop<Model, string>;
  checked?: Prop<Model, boolean>;
  autofocus?: Prop<Model, boolean>;

  // Element events
  onabort?: EventProp<Model, Msg, HTMLElementEventMap['abort'], Elem>;
  onanimationcancel?: EventProp<Model, Msg, HTMLElementEventMap['animationcancel'], Elem>;
  onanimationend?: EventProp<Model, Msg, HTMLElementEventMap['animationend'], Elem>;
  onanimationiteration?: EventProp<Model, Msg, HTMLElementEventMap['animationiteration'], Elem>;
  onanimationstart?: EventProp<Model, Msg, HTMLElementEventMap['animationstart'], Elem>;
  onauxclick?: EventProp<Model, Msg, HTMLElementEventMap['auxclick'], Elem>;
  onblur?: EventProp<Model, Msg, HTMLElementEventMap['blur'], Elem>;
  oncancel?: EventProp<Model, Msg, HTMLElementEventMap['cancel'], Elem>;
  oncanplay?: EventProp<Model, Msg, HTMLElementEventMap['canplay'], Elem>;
  oncanplaythrough?: EventProp<Model, Msg, HTMLElementEventMap['canplaythrough'], Elem>;
  onchange?: EventProp<Model, Msg, HTMLElementEventMap['change'], Elem>;
  onclick?: EventProp<Model, Msg, HTMLElementEventMap['click'], Elem>;
  onclose?: EventProp<Model, Msg, HTMLElementEventMap['close'], Elem>;
  oncontextmenu?: EventProp<Model, Msg, HTMLElementEventMap['contextmenu'], Elem>;
  oncuechange?: EventProp<Model, Msg, HTMLElementEventMap['cuechange'], Elem>;
  ondblclick?: EventProp<Model, Msg, HTMLElementEventMap['dblclick'], Elem>;
  ondrag?: EventProp<Model, Msg, HTMLElementEventMap['drag'], Elem>;
  ondragend?: EventProp<Model, Msg, HTMLElementEventMap['dragend'], Elem>;
  ondragenter?: EventProp<Model, Msg, HTMLElementEventMap['dragenter'], Elem>;
  ondragexit?: EventProp<Model, Msg, HTMLElementEventMap['dragexit'], Elem>;
  ondragleave?: EventProp<Model, Msg, HTMLElementEventMap['dragleave'], Elem>;
  ondragover?: EventProp<Model, Msg, HTMLElementEventMap['dragover'], Elem>;
  ondragstart?: EventProp<Model, Msg, HTMLElementEventMap['dragstart'], Elem>;
  ondrop?: EventProp<Model, Msg, HTMLElementEventMap['drop'], Elem>;
  ondurationchange?: EventProp<Model, Msg, HTMLElementEventMap['durationchange'], Elem>;
  onemptied?: EventProp<Model, Msg, HTMLElementEventMap['emptied'], Elem>;
  onended?: EventProp<Model, Msg, HTMLElementEventMap['ended'], Elem>;
  onerror?: EventProp<Model, Msg, HTMLElementEventMap['error'], Elem>;
  onfocus?: EventProp<Model, Msg, HTMLElementEventMap['focus'], Elem>;
  ongotpointercapture?: EventProp<Model, Msg, HTMLElementEventMap['gotpointercapture'], Elem>;
  oninput?: EventProp<Model, Msg, HTMLElementEventMap['input'], Elem>;
  oninvalid?: EventProp<Model, Msg, HTMLElementEventMap['invalid'], Elem>;
  onkeydown?: EventProp<Model, Msg, HTMLElementEventMap['keydown'], Elem>;
  onkeypress?: EventProp<Model, Msg, HTMLElementEventMap['keypress'], Elem>;
  onkeyup?: EventProp<Model, Msg, HTMLElementEventMap['keyup'], Elem>;
  onload?: EventProp<Model, Msg, HTMLElementEventMap['load'], Elem>;
  onloadeddata?: EventProp<Model, Msg, HTMLElementEventMap['loadeddata'], Elem>;
  onloadedmetadata?: EventProp<Model, Msg, HTMLElementEventMap['loadedmetadata'], Elem>;
  onloadend?: EventProp<Model, Msg, HTMLElementEventMap['loadend'], Elem>;
  onloadstart?: EventProp<Model, Msg, HTMLElementEventMap['loadstart'], Elem>;
  onlostpointercapture?: EventProp<Model, Msg, HTMLElementEventMap['lostpointercapture'], Elem>;
  onmousedown?: EventProp<Model, Msg, HTMLElementEventMap['mousedown'], Elem>;
  onmouseenter?: EventProp<Model, Msg, HTMLElementEventMap['mouseenter'], Elem>;
  onmouseleave?: EventProp<Model, Msg, HTMLElementEventMap['mouseleave'], Elem>;
  onmousemove?: EventProp<Model, Msg, HTMLElementEventMap['mousemove'], Elem>;
  onmouseout?: EventProp<Model, Msg, HTMLElementEventMap['mouseout'], Elem>;
  onmouseover?: EventProp<Model, Msg, HTMLElementEventMap['mouseover'], Elem>;
  onmouseup?: EventProp<Model, Msg, HTMLElementEventMap['mouseup'], Elem>;
  onpause?: EventProp<Model, Msg, HTMLElementEventMap['pause'], Elem>;
  onplay?: EventProp<Model, Msg, HTMLElementEventMap['play'], Elem>;
  onplaying?: EventProp<Model, Msg, HTMLElementEventMap['playing'], Elem>;
  onpointercancel?: EventProp<Model, Msg, HTMLElementEventMap['pointercancel'], Elem>;
  onpointerdown?: EventProp<Model, Msg, HTMLElementEventMap['pointerdown'], Elem>;
  onpointerenter?: EventProp<Model, Msg, HTMLElementEventMap['pointerenter'], Elem>;
  onpointerleave?: EventProp<Model, Msg, HTMLElementEventMap['pointerleave'], Elem>;
  onpointermove?: EventProp<Model, Msg, HTMLElementEventMap['pointermove'], Elem>;
  onpointerout?: EventProp<Model, Msg, HTMLElementEventMap['pointerout'], Elem>;
  onpointerover?: EventProp<Model, Msg, HTMLElementEventMap['pointerover'], Elem>;
  onpointerup?: EventProp<Model, Msg, HTMLElementEventMap['pointerup'], Elem>;
  onprogress?: EventProp<Model, Msg, HTMLElementEventMap['progress'], Elem>;
  onratechange?: EventProp<Model, Msg, HTMLElementEventMap['ratechange'], Elem>;
  onreset?: EventProp<Model, Msg, HTMLElementEventMap['reset'], Elem>;
  onresize?: EventProp<Model, Msg, HTMLElementEventMap['resize'], Elem>;
  onscroll?: EventProp<Model, Msg, HTMLElementEventMap['scroll'], Elem>;
  onsecuritypolicyviolation?: EventProp<Model, Msg, HTMLElementEventMap['securitypolicyviolation'], Elem>;
  onseeked?: EventProp<Model, Msg, HTMLElementEventMap['seeked'], Elem>;
  onseeking?: EventProp<Model, Msg, HTMLElementEventMap['seeking'], Elem>;
  onselect?: EventProp<Model, Msg, HTMLElementEventMap['select'], Elem>;
  onstalled?: EventProp<Model, Msg, HTMLElementEventMap['stalled'], Elem>;
  onsubmit?: EventProp<Model, Msg, HTMLElementEventMap['submit'], Elem>;
  onsuspend?: EventProp<Model, Msg, HTMLElementEventMap['suspend'], Elem>;
  ontimeupdate?: EventProp<Model, Msg, HTMLElementEventMap['timeupdate'], Elem>;
  ontoggle?: EventProp<Model, Msg, HTMLElementEventMap['toggle'], Elem>;
  ontouchcancel?: EventProp<Model, Msg, HTMLElementEventMap['touchcancel'], Elem>;
  ontouchend?: EventProp<Model, Msg, HTMLElementEventMap['touchend'], Elem>;
  ontouchmove?: EventProp<Model, Msg, HTMLElementEventMap['touchmove'], Elem>;
  ontouchstart?: EventProp<Model, Msg, HTMLElementEventMap['touchstart'], Elem>;
  ontransitioncancel?: EventProp<Model, Msg, HTMLElementEventMap['transitioncancel'], Elem>;
  ontransitionend?: EventProp<Model, Msg, HTMLElementEventMap['transitionend'], Elem>;
  ontransitionrun?: EventProp<Model, Msg, HTMLElementEventMap['transitionrun'], Elem>;
  ontransitionstart?: EventProp<Model, Msg, HTMLElementEventMap['transitionstart'], Elem>;
  onvolumechange?: EventProp<Model, Msg, HTMLElementEventMap['volumechange'], Elem>;
  onwaiting?: EventProp<Model, Msg, HTMLElementEventMap['waiting'], Elem>;
  onwheel?: EventProp<Model, Msg, HTMLElementEventMap['wheel'], Elem>;
};

export const attributes = {
  for: '', class: '',
};

export type Omit<T, U extends keyof T> = { [K in Exclude<keyof T, U>]: T[K] };
