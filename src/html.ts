import { h, SDOM, ElementContent, Many } from './index';

declare module "./index" {
  export interface H<Model, Msg> {
    a: NamedH<Model, Msg, HTMLElementTagNameMap['a']>;
    abbr: NamedH<Model, Msg, HTMLElementTagNameMap['abbr']>;
    address: NamedH<Model, Msg, HTMLElementTagNameMap['address']>;
    applet: NamedH<Model, Msg, HTMLElementTagNameMap['applet']>;
    area: NamedH<Model, Msg, HTMLElementTagNameMap['area']>;
    article: NamedH<Model, Msg, HTMLElementTagNameMap['article']>;
    aside: NamedH<Model, Msg, HTMLElementTagNameMap['aside']>;
    audio: NamedH<Model, Msg, HTMLElementTagNameMap['audio']>;
    b: NamedH<Model, Msg, HTMLElementTagNameMap['b']>;
    base: NamedH<Model, Msg, HTMLElementTagNameMap['base']>;
    basefont: NamedH<Model, Msg, HTMLElementTagNameMap['basefont']>;
    bdo: NamedH<Model, Msg, HTMLElementTagNameMap['bdo']>;
    blockquote: NamedH<Model, Msg, HTMLElementTagNameMap['blockquote']>;
    body: NamedH<Model, Msg, HTMLElementTagNameMap['body']>;
    br: NamedH<Model, Msg, HTMLElementTagNameMap['br']>;
    button: NamedH<Model, Msg, HTMLElementTagNameMap['button']>;
    canvas: NamedH<Model, Msg, HTMLElementTagNameMap['canvas']>;
    caption: NamedH<Model, Msg, HTMLElementTagNameMap['caption']>;
    cite: NamedH<Model, Msg, HTMLElementTagNameMap['cite']>;
    code: NamedH<Model, Msg, HTMLElementTagNameMap['code']>;
    col: NamedH<Model, Msg, HTMLElementTagNameMap['col']>;
    colgroup: NamedH<Model, Msg, HTMLElementTagNameMap['colgroup']>;
    data: NamedH<Model, Msg, HTMLElementTagNameMap['data']>;
    datalist: NamedH<Model, Msg, HTMLElementTagNameMap['datalist']>;
    dd: NamedH<Model, Msg, HTMLElementTagNameMap['dd']>;
    del: NamedH<Model, Msg, HTMLElementTagNameMap['del']>;
    details: NamedH<Model, Msg, HTMLElementTagNameMap['details']>;
    dfn: NamedH<Model, Msg, HTMLElementTagNameMap['dfn']>;
    dialog: NamedH<Model, Msg, HTMLElementTagNameMap['dialog']>;
    dir: NamedH<Model, Msg, HTMLElementTagNameMap['dir']>;
    div: NamedH<Model, Msg, HTMLElementTagNameMap['div']>;
    dl: NamedH<Model, Msg, HTMLElementTagNameMap['dl']>;
    dt: NamedH<Model, Msg, HTMLElementTagNameMap['dt']>;
    em: NamedH<Model, Msg, HTMLElementTagNameMap['em']>;
    embed: NamedH<Model, Msg, HTMLElementTagNameMap['embed']>;
    fieldset: NamedH<Model, Msg, HTMLElementTagNameMap['fieldset']>;
    figcaption: NamedH<Model, Msg, HTMLElementTagNameMap['figcaption']>;
    figure: NamedH<Model, Msg, HTMLElementTagNameMap['figure']>;
    font: NamedH<Model, Msg, HTMLElementTagNameMap['font']>;
    footer: NamedH<Model, Msg, HTMLElementTagNameMap['footer']>;
    form: NamedH<Model, Msg, HTMLElementTagNameMap['form']>;
    frame: NamedH<Model, Msg, HTMLElementTagNameMap['frame']>;
    frameset: NamedH<Model, Msg, HTMLElementTagNameMap['frameset']>;
    h1: NamedH<Model, Msg, HTMLElementTagNameMap['h1']>;
    h2: NamedH<Model, Msg, HTMLElementTagNameMap['h2']>;
    h3: NamedH<Model, Msg, HTMLElementTagNameMap['h3']>;
    h4: NamedH<Model, Msg, HTMLElementTagNameMap['h4']>;
    h5: NamedH<Model, Msg, HTMLElementTagNameMap['h5']>;
    h6: NamedH<Model, Msg, HTMLElementTagNameMap['h6']>;
    head: NamedH<Model, Msg, HTMLElementTagNameMap['head']>;
    header: NamedH<Model, Msg, HTMLElementTagNameMap['header']>;
    hgroup: NamedH<Model, Msg, HTMLElementTagNameMap['hgroup']>;
    hr: NamedH<Model, Msg, HTMLElementTagNameMap['hr']>;
    html: NamedH<Model, Msg, HTMLElementTagNameMap['html']>;
    i: NamedH<Model, Msg, HTMLElementTagNameMap['i']>;
    iframe: NamedH<Model, Msg, HTMLElementTagNameMap['iframe']>;
    img: NamedH1<Model, Msg, HTMLElementTagNameMap['img']>;
    input: NamedH1<Model, Msg, HTMLElementTagNameMap['input']>;
    ins: NamedH<Model, Msg, HTMLElementTagNameMap['ins']>;
    kbd: NamedH<Model, Msg, HTMLElementTagNameMap['kbd']>;
    label: NamedH<Model, Msg, HTMLElementTagNameMap['label']>;
    legend: NamedH<Model, Msg, HTMLElementTagNameMap['legend']>;
    li: NamedH<Model, Msg, HTMLElementTagNameMap['li']>;
    link: NamedH<Model, Msg, HTMLElementTagNameMap['link']>;
    main: NamedH<Model, Msg, HTMLElement>;
    map: NamedH<Model, Msg, HTMLElementTagNameMap['map']>;
    mark: NamedH<Model, Msg, HTMLElementTagNameMap['mark']>;
    marquee: NamedH<Model, Msg, HTMLElementTagNameMap['marquee']>;
    menu: NamedH<Model, Msg, HTMLElementTagNameMap['menu']>;
    meta: NamedH<Model, Msg, HTMLElementTagNameMap['meta']>;
    meter: NamedH<Model, Msg, HTMLElementTagNameMap['meter']>;
    nav: NamedH<Model, Msg, HTMLElementTagNameMap['nav']>;
    noscript: NamedH<Model, Msg, HTMLElementTagNameMap['noscript']>;
    object: NamedH<Model, Msg, HTMLElementTagNameMap['object']>;
    ol: NamedH<Model, Msg, HTMLElementTagNameMap['ol']>;
    optgroup: NamedH<Model, Msg, HTMLElementTagNameMap['optgroup']>;
    option: NamedH<Model, Msg, HTMLElementTagNameMap['option']>;
    output: NamedH<Model, Msg, HTMLElementTagNameMap['output']>;
    p: NamedH<Model, Msg, HTMLElementTagNameMap['p']>;
    param: NamedH<Model, Msg, HTMLElementTagNameMap['param']>;
    picture: NamedH<Model, Msg, HTMLElementTagNameMap['picture']>;
    pre: NamedH<Model, Msg, HTMLElementTagNameMap['pre']>;
    progress: NamedH<Model, Msg, HTMLElementTagNameMap['progress']>;
    q: NamedH<Model, Msg, HTMLElementTagNameMap['q']>;
    rt: NamedH<Model, Msg, HTMLElementTagNameMap['rt']>;
    ruby: NamedH<Model, Msg, HTMLElementTagNameMap['ruby']>;
    s: NamedH<Model, Msg, HTMLElementTagNameMap['s']>;
    samp: NamedH<Model, Msg, HTMLElementTagNameMap['samp']>;
    script: NamedH<Model, Msg, HTMLElementTagNameMap['script']>;
    section: NamedH<Model, Msg, HTMLElementTagNameMap['section']>;
    select: NamedH<Model, Msg, HTMLElementTagNameMap['select']>;
    slot: NamedH<Model, Msg, HTMLElementTagNameMap['slot']>;
    small: NamedH<Model, Msg, HTMLElementTagNameMap['small']>;
    source: NamedH<Model, Msg, HTMLElementTagNameMap['source']>;
    span: NamedH<Model, Msg, HTMLElementTagNameMap['span']>;
    strong: NamedH<Model, Msg, HTMLElementTagNameMap['strong']>;
    style: NamedH<Model, Msg, HTMLElementTagNameMap['style']>;
    sub: NamedH<Model, Msg, HTMLElementTagNameMap['sub']>;
    sup: NamedH<Model, Msg, HTMLElementTagNameMap['sup']>;
    table: NamedH<Model, Msg, HTMLElementTagNameMap['table']>;
    tbody: NamedH<Model, Msg, HTMLElementTagNameMap['tbody']>;
    td: NamedH<Model, Msg, HTMLElementTagNameMap['td']>;
    template: NamedH<Model, Msg, HTMLElementTagNameMap['template']>;
    textarea: NamedH<Model, Msg, HTMLElementTagNameMap['textarea']>;
    tfoot: NamedH<Model, Msg, HTMLElementTagNameMap['tfoot']>;
    th: NamedH<Model, Msg, HTMLElementTagNameMap['th']>;
    thead: NamedH<Model, Msg, HTMLElementTagNameMap['thead']>;
    time: NamedH<Model, Msg, HTMLElementTagNameMap['time']>;
    title: NamedH<Model, Msg, HTMLElementTagNameMap['title']>;
    tr: NamedH<Model, Msg, HTMLElementTagNameMap['tr']>;
    track: NamedH<Model, Msg, HTMLElementTagNameMap['track']>;
    u: NamedH<Model, Msg, HTMLElementTagNameMap['u']>;
    ul: NamedH<Model, Msg, HTMLElementTagNameMap['ul']>;
    var: NamedH<Model, Msg, HTMLElementTagNameMap['var']>;
    video: NamedH<Model, Msg, HTMLElementTagNameMap['video']>;
    wbr: NamedH<Model, Msg, HTMLElementTagNameMap['wbr']>;
  }
}

export type NamedH<Model, Msg, Elem extends Node = HTMLElement> = (...args: Many<ElementContent<Model, Msg, Elem>>[]) => SDOM<Model, Msg, Elem>;

export type NamedH1<Model, Msg, Elem extends Node = HTMLElement> = {
  (...args: Array<Props<Model, Msg, Elem>>): SDOM<Model, Msg, Elem>;
};

h.a = h.bind(void 0, 'a', { href: 'javascript://void 0' }) as any;
h.abbr = h.bind(void 0, 'abbr') as any;
h.address = h.bind(void 0, 'address') as any;
h.applet = h.bind(void 0, 'applet') as any;
h.area = h.bind(void 0, 'area') as any;
h.article = h.bind(void 0, 'article') as any;
h.aside = h.bind(void 0, 'aside') as any;
h.audio = h.bind(void 0, 'audio') as any;
h.b = h.bind(void 0, 'b') as any;
h.base = h.bind(void 0, 'base') as any;
h.basefont = h.bind(void 0, 'basefont') as any;
h.bdo = h.bind(void 0, 'bdo') as any;
h.blockquote = h.bind(void 0, 'blockquote') as any;
h.body = h.bind(void 0, 'body') as any;
h.br = h.bind(void 0, 'br') as any;
h.button = h.bind(void 0, 'button') as any;
h.canvas = h.bind(void 0, 'canvas') as any;
h.caption = h.bind(void 0, 'caption') as any;
h.cite = h.bind(void 0, 'cite') as any;
h.code = h.bind(void 0, 'code') as any;
h.col = h.bind(void 0, 'col') as any;
h.colgroup = h.bind(void 0, 'colgroup') as any;
h.data = h.bind(void 0, 'data') as any;
h.datalist = h.bind(void 0, 'datalist') as any;
h.dd = h.bind(void 0, 'dd') as any;
h.del = h.bind(void 0, 'del') as any;
h.details = h.bind(void 0, 'details') as any;
h.dfn = h.bind(void 0, 'dfn') as any;
h.dialog = h.bind(void 0, 'dialog') as any;
h.dir = h.bind(void 0, 'dir') as any;
h.div = h.bind(void 0, 'div') as any;
h.dl = h.bind(void 0, 'dl') as any;
h.dt = h.bind(void 0, 'dt') as any;
h.em = h.bind(void 0, 'em') as any;
h.embed = h.bind(void 0, 'embed') as any;
h.fieldset = h.bind(void 0, 'fieldset') as any;
h.figcaption = h.bind(void 0, 'figcaption') as any;
h.figure = h.bind(void 0, 'figure') as any;
h.font = h.bind(void 0, 'font') as any;
h.footer = h.bind(void 0, 'footer') as any;
h.form = h.bind(void 0, 'form') as any;
h.frame = h.bind(void 0, 'frame') as any;
h.frameset = h.bind(void 0, 'frameset') as any;
h.h1 = h.bind(void 0, 'h1') as any;
h.h2 = h.bind(void 0, 'h2') as any;
h.h3 = h.bind(void 0, 'h3') as any;
h.h4 = h.bind(void 0, 'h4') as any;
h.h5 = h.bind(void 0, 'h5') as any;
h.h6 = h.bind(void 0, 'h6') as any;
h.head = h.bind(void 0, 'head') as any;
h.header = h.bind(void 0, 'header') as any;
h.hgroup = h.bind(void 0, 'hgroup') as any;
h.hr = h.bind(void 0, 'hr') as any;
h.html = h.bind(void 0, 'html') as any;
h.i = h.bind(void 0, 'i') as any;
h.iframe = h.bind(void 0, 'iframe') as any;
h.img = h.bind(void 0, 'img') as any;
h.input = h.bind(void 0, 'input') as any;
h.ins = h.bind(void 0, 'ins') as any;
h.kbd = h.bind(void 0, 'kbd') as any;
h.label = h.bind(void 0, 'label') as any;
h.legend = h.bind(void 0, 'legend') as any;
h.li = h.bind(void 0, 'li') as any;
h.link = h.bind(void 0, 'link') as any;
h.main = h.bind(void 0, 'main') as any;
h.map = h.bind(void 0, 'map') as any;
h.mark = h.bind(void 0, 'mark') as any;
h.marquee = h.bind(void 0, 'marquee') as any;
h.menu = h.bind(void 0, 'menu') as any;
h.meta = h.bind(void 0, 'meta') as any;
h.meter = h.bind(void 0, 'meter') as any;
h.nav = h.bind(void 0, 'nav') as any;
h.noscript = h.bind(void 0, 'noscript') as any;
h.object = h.bind(void 0, 'object') as any;
h.ol = h.bind(void 0, 'ol') as any;
h.optgroup = h.bind(void 0, 'optgroup') as any;
h.option = h.bind(void 0, 'option') as any;
h.output = h.bind(void 0, 'output') as any;
h.p = h.bind(void 0, 'p') as any;
h.param = h.bind(void 0, 'param') as any;
h.picture = h.bind(void 0, 'picture') as any;
h.pre = h.bind(void 0, 'pre') as any;
h.progress = h.bind(void 0, 'progress') as any;
h.q = h.bind(void 0, 'q') as any;
h.rt = h.bind(void 0, 'rt') as any;
h.ruby = h.bind(void 0, 'ruby') as any;
h.s = h.bind(void 0, 's') as any;
h.samp = h.bind(void 0, 'samp') as any;
h.script = h.bind(void 0, 'script') as any;
h.section = h.bind(void 0, 'section') as any;
h.select = h.bind(void 0, 'select') as any;
h.slot = h.bind(void 0, 'slot') as any;
h.small = h.bind(void 0, 'small') as any;
h.source = h.bind(void 0, 'source') as any;
h.span = h.bind(void 0, 'span') as any;
h.strong = h.bind(void 0, 'strong') as any;
h.style = h.bind(void 0, 'style') as any;
h.sub = h.bind(void 0, 'sub') as any;
h.sup = h.bind(void 0, 'sup') as any;
h.table = h.bind(void 0, 'table') as any;
h.tbody = h.bind(void 0, 'tbody') as any;
h.td = h.bind(void 0, 'td') as any;
h.template = h.bind(void 0, 'template') as any;
h.textarea = h.bind(void 0, 'textarea') as any;
h.tfoot = h.bind(void 0, 'tfoot') as any;
h.th = h.bind(void 0, 'th') as any;
h.thead = h.bind(void 0, 'thead') as any;
h.time = h.bind(void 0, 'time') as any;
h.title = h.bind(void 0, 'title') as any;
h.tr = h.bind(void 0, 'tr') as any;
h.track = h.bind(void 0, 'track') as any;
h.u = h.bind(void 0, 'u') as any;
h.ul = h.bind(void 0, 'ul') as any;
h.var = h.bind(void 0, 'var') as any;
h.video = h.bind(void 0, 'video') as any;
h.wbr = h.bind(void 0, 'wbr') as any;

export type Prop<Model, T, Elem> = T|((m: Model, el: Elem) => T);
export type EventProp<Model, Msg, Ev extends Event, Elem> = Msg|((e: WithTarget<Ev, Elem>, m: Model) => Msg|void);
export type WithTarget<Ev extends Event, Target> = Omit<Ev, 'currentTarget'> & { currentTarget: Target };

export type Props<Model, Msg, Elem = HTMLElement> = {
  className?: Prop<Model, string, Elem>;
  class?: Prop<Model, string, Elem>;
  style?: Prop<Model, string, Elem>;
  classList?: Record<string, boolean|((m: Model) => boolean)>
  title?: Prop<Model, string, Elem>;
  selected?: Prop<Model, boolean, Elem>;
  hidden?: Prop<Model, boolean, Elem>;
  value?: Prop<Model, string, Elem>;
  defaultValue?: Prop<Model, string, Elem>;
  accept?: Prop<Model, string, Elem>;
  acceptCharset?: Prop<Model, string, Elem>;
  action?: Prop<Model, string, Elem>;
  autocomplete?: Prop<Model, 'on'|'off', Elem>;
  autosave?: Prop<Model, string, Elem>;
  disabled?: Prop<Model, boolean, Elem>;
  enctype?: Prop<Model, string, Elem>;
  formation?: Prop<Model, string, Elem>;
  list?: Prop<Model, string, Elem>;
  maxlength?: Prop<Model, string, Elem>;
  minlength?: Prop<Model, string, Elem>;
  method?: Prop<Model, string, Elem>;
  multiple?: Prop<Model, boolean, Elem>;
  novalidate?: Prop<Model, boolean, Elem>;
  pattern?: Prop<Model, string, Elem>;
  readonly?: Prop<Model, boolean, Elem>;
  required?: Prop<Model, boolean, Elem>;
  size?: Prop<Model, string, Elem>;
  for?: Prop<Model, string, Elem>;
  form?: Prop<Model, string, Elem>;
  max?: Prop<Model, string, Elem>;
  min?: Prop<Model, string, Elem>;
  step?: Prop<Model, string, Elem>;
  cols?: Prop<Model, string, Elem>;
  rows?: Prop<Model, string, Elem>;
  wrap?: Prop<Model, string, Elem>;
  target?: Prop<Model, string, Elem>;
  download?: Prop<Model, string, Elem>;
  poster?: Prop<Model, string, Elem>;
  downloadAs?: Prop<Model, string, Elem>;
  hreflang?: Prop<Model, string, Elem>;
  media?: Prop<Model, string, Elem>;
  ping?: Prop<Model, string, Elem>;
  rel?: Prop<Model, string, Elem>;
  ismap?: Prop<Model, string, Elem>;
  usemap?: Prop<Model, string, Elem>;
  shape?: Prop<Model, string, Elem>;
  coords?: Prop<Model, string, Elem>;
  src?: Prop<Model, string, Elem>;
  height?: Prop<Model, string, Elem>;
  width?: Prop<Model, string, Elem>;
  alt?: Prop<Model, string, Elem>;
  autoplay?: Prop<Model, string, Elem>;
  controls?: Prop<Model, boolean, Elem>;
  loop?: Prop<Model, boolean, Elem>;
  preload?: Prop<Model, string, Elem>;
  default?: Prop<Model, boolean, Elem>;
  kind?: Prop<Model, string, Elem>;
  srclang?: Prop<Model, string, Elem>;
  sandbox?: Prop<Model, string, Elem>;
  seamless?: Prop<Model, string, Elem>;
  srcdoc?: Prop<Model, string, Elem>;
  reversed?: Prop<Model, string, Elem>;
  start?: Prop<Model, string, Elem>;
  align?: Prop<Model, string, Elem>;
  colspan?: Prop<Model, string, Elem>;
  rowspan?: Prop<Model, string, Elem>;
  headers?: Prop<Model, string, Elem>;
  scope?: Prop<Model, string, Elem>;
  async?: Prop<Model, boolean, Elem>;
  charset?: Prop<Model, string, Elem>;
  content?: Prop<Model, string, Elem>;
  defer?: Prop<Model, string, Elem>;
  httpEquiv?: Prop<Model, string, Elem>;
  language?: Prop<Model, string, Elem>;
  scoped?: Prop<Model, string, Elem>;
  type?: Prop<Model, string, Elem>;
  name?: Prop<Model, string, Elem>;
  href?: Prop<Model, string, Elem>;
  id?: Prop<Model, string, Elem>;
  placeholder?: Prop<Model, string, Elem>;
  checked?: Prop<Model, boolean, Elem>;
  autofocus?: Prop<Model, boolean, Elem>;

  // Element events
  onabort?: EventProp<Model, Msg, HTMLElementEventMap['abort'], Elem>;
  onanimationcancel?: EventProp<Model, Msg, HTMLElementEventMap['animationcancel'], Elem>;
  onanimationend?: EventProp<Model, Msg, HTMLElementEventMap['animationend'], Elem>;
  onanimationiteration?: EventProp<Model, Msg, HTMLElementEventMap['animationiteration'], Elem>;
  onanimationstart?: EventProp<Model, Msg, HTMLElementEventMap['animationstart'], Elem>;
  onauxclick?: EventProp<Model, Msg, HTMLElementEventMap['auxclick'], Elem>;
  onblur?: EventProp<Model, Msg, HTMLElementEventMap['blur'], Elem>;
  oncancel?: EventProp<Model, Msg, HTMLElementEventMap['cancel'], Elem>;
  oncanplay?: EventProp<Model, Msg, HTMLElementEventMap['canplay'], Elem>;
  oncanplaythrough?: EventProp<Model, Msg, HTMLElementEventMap['canplaythrough'], Elem>;
  onchange?: EventProp<Model, Msg, HTMLElementEventMap['change'], Elem>;
  onclick?: EventProp<Model, Msg, HTMLElementEventMap['click'], Elem>;
  onclose?: EventProp<Model, Msg, HTMLElementEventMap['close'], Elem>;
  oncontextmenu?: EventProp<Model, Msg, HTMLElementEventMap['contextmenu'], Elem>;
  oncuechange?: EventProp<Model, Msg, HTMLElementEventMap['cuechange'], Elem>;
  ondblclick?: EventProp<Model, Msg, HTMLElementEventMap['dblclick'], Elem>;
  ondrag?: EventProp<Model, Msg, HTMLElementEventMap['drag'], Elem>;
  ondragend?: EventProp<Model, Msg, HTMLElementEventMap['dragend'], Elem>;
  ondragenter?: EventProp<Model, Msg, HTMLElementEventMap['dragenter'], Elem>;
  ondragexit?: EventProp<Model, Msg, HTMLElementEventMap['dragexit'], Elem>;
  ondragleave?: EventProp<Model, Msg, HTMLElementEventMap['dragleave'], Elem>;
  ondragover?: EventProp<Model, Msg, HTMLElementEventMap['dragover'], Elem>;
  ondragstart?: EventProp<Model, Msg, HTMLElementEventMap['dragstart'], Elem>;
  ondrop?: EventProp<Model, Msg, HTMLElementEventMap['drop'], Elem>;
  ondurationchange?: EventProp<Model, Msg, HTMLElementEventMap['durationchange'], Elem>;
  onemptied?: EventProp<Model, Msg, HTMLElementEventMap['emptied'], Elem>;
  onended?: EventProp<Model, Msg, HTMLElementEventMap['ended'], Elem>;
  onerror?: EventProp<Model, Msg, HTMLElementEventMap['error'], Elem>;
  onfocus?: EventProp<Model, Msg, HTMLElementEventMap['focus'], Elem>;
  ongotpointercapture?: EventProp<Model, Msg, HTMLElementEventMap['gotpointercapture'], Elem>;
  oninput?: EventProp<Model, Msg, HTMLElementEventMap['input'], Elem>;
  oninvalid?: EventProp<Model, Msg, HTMLElementEventMap['invalid'], Elem>;
  onkeydown?: EventProp<Model, Msg, HTMLElementEventMap['keydown'], Elem>;
  onkeypress?: EventProp<Model, Msg, HTMLElementEventMap['keypress'], Elem>;
  onkeyup?: EventProp<Model, Msg, HTMLElementEventMap['keyup'], Elem>;
  onload?: EventProp<Model, Msg, HTMLElementEventMap['load'], Elem>;
  onloadeddata?: EventProp<Model, Msg, HTMLElementEventMap['loadeddata'], Elem>;
  onloadedmetadata?: EventProp<Model, Msg, HTMLElementEventMap['loadedmetadata'], Elem>;
  onloadend?: EventProp<Model, Msg, HTMLElementEventMap['loadend'], Elem>;
  onloadstart?: EventProp<Model, Msg, HTMLElementEventMap['loadstart'], Elem>;
  onlostpointercapture?: EventProp<Model, Msg, HTMLElementEventMap['lostpointercapture'], Elem>;
  onmousedown?: EventProp<Model, Msg, HTMLElementEventMap['mousedown'], Elem>;
  onmouseenter?: EventProp<Model, Msg, HTMLElementEventMap['mouseenter'], Elem>;
  onmouseleave?: EventProp<Model, Msg, HTMLElementEventMap['mouseleave'], Elem>;
  onmousemove?: EventProp<Model, Msg, HTMLElementEventMap['mousemove'], Elem>;
  onmouseout?: EventProp<Model, Msg, HTMLElementEventMap['mouseout'], Elem>;
  onmouseover?: EventProp<Model, Msg, HTMLElementEventMap['mouseover'], Elem>;
  onmouseup?: EventProp<Model, Msg, HTMLElementEventMap['mouseup'], Elem>;
  onpause?: EventProp<Model, Msg, HTMLElementEventMap['pause'], Elem>;
  onplay?: EventProp<Model, Msg, HTMLElementEventMap['play'], Elem>;
  onplaying?: EventProp<Model, Msg, HTMLElementEventMap['playing'], Elem>;
  onpointercancel?: EventProp<Model, Msg, HTMLElementEventMap['pointercancel'], Elem>;
  onpointerdown?: EventProp<Model, Msg, HTMLElementEventMap['pointerdown'], Elem>;
  onpointerenter?: EventProp<Model, Msg, HTMLElementEventMap['pointerenter'], Elem>;
  onpointerleave?: EventProp<Model, Msg, HTMLElementEventMap['pointerleave'], Elem>;
  onpointermove?: EventProp<Model, Msg, HTMLElementEventMap['pointermove'], Elem>;
  onpointerout?: EventProp<Model, Msg, HTMLElementEventMap['pointerout'], Elem>;
  onpointerover?: EventProp<Model, Msg, HTMLElementEventMap['pointerover'], Elem>;
  onpointerup?: EventProp<Model, Msg, HTMLElementEventMap['pointerup'], Elem>;
  onprogress?: EventProp<Model, Msg, HTMLElementEventMap['progress'], Elem>;
  onratechange?: EventProp<Model, Msg, HTMLElementEventMap['ratechange'], Elem>;
  onreset?: EventProp<Model, Msg, HTMLElementEventMap['reset'], Elem>;
  onresize?: EventProp<Model, Msg, HTMLElementEventMap['resize'], Elem>;
  onscroll?: EventProp<Model, Msg, HTMLElementEventMap['scroll'], Elem>;
  onsecuritypolicyviolation?: EventProp<Model, Msg, HTMLElementEventMap['securitypolicyviolation'], Elem>;
  onseeked?: EventProp<Model, Msg, HTMLElementEventMap['seeked'], Elem>;
  onseeking?: EventProp<Model, Msg, HTMLElementEventMap['seeking'], Elem>;
  onselect?: EventProp<Model, Msg, HTMLElementEventMap['select'], Elem>;
  onstalled?: EventProp<Model, Msg, HTMLElementEventMap['stalled'], Elem>;
  onsubmit?: EventProp<Model, Msg, HTMLElementEventMap['submit'], Elem>;
  onsuspend?: EventProp<Model, Msg, HTMLElementEventMap['suspend'], Elem>;
  ontimeupdate?: EventProp<Model, Msg, HTMLElementEventMap['timeupdate'], Elem>;
  ontoggle?: EventProp<Model, Msg, HTMLElementEventMap['toggle'], Elem>;
  ontouchcancel?: EventProp<Model, Msg, HTMLElementEventMap['touchcancel'], Elem>;
  ontouchend?: EventProp<Model, Msg, HTMLElementEventMap['touchend'], Elem>;
  ontouchmove?: EventProp<Model, Msg, HTMLElementEventMap['touchmove'], Elem>;
  ontouchstart?: EventProp<Model, Msg, HTMLElementEventMap['touchstart'], Elem>;
  ontransitioncancel?: EventProp<Model, Msg, HTMLElementEventMap['transitioncancel'], Elem>;
  ontransitionend?: EventProp<Model, Msg, HTMLElementEventMap['transitionend'], Elem>;
  ontransitionrun?: EventProp<Model, Msg, HTMLElementEventMap['transitionrun'], Elem>;
  ontransitionstart?: EventProp<Model, Msg, HTMLElementEventMap['transitionstart'], Elem>;
  onvolumechange?: EventProp<Model, Msg, HTMLElementEventMap['volumechange'], Elem>;
  onwaiting?: EventProp<Model, Msg, HTMLElementEventMap['waiting'], Elem>;
  onwheel?: EventProp<Model, Msg, HTMLElementEventMap['wheel'], Elem>;
} & {
  [K in string]?: Prop<Model, any, Elem>;  
};

export type Omit<T, U extends keyof T> = { [K in Exclude<keyof T, U>]: T[K] };
